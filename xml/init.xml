<alloy builddate="2021-11-03T15:25:43.736Z">

<instance bitwidth="4" maxseq="7" mintrace="-1" maxtrace="-1" command="Run run$1 for 8 but exactly 8 Word" filename="C:\Users\tilly\cs340\cs340project\malloc.als" tracelength="1" backloop="0">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/Alloc" ID="4" parentID="5" one="yes">
   <atom label="Alloc$0"/>
</sig>

<sig label="this/Free" ID="6" parentID="5" one="yes">
   <atom label="Free$0"/>
</sig>

<sig label="this/Status" ID="5" parentID="2" abstract="yes">
</sig>

<sig label="this/HeaderWord" ID="7" parentID="8">
</sig>

<sig label="this/NormalWord" ID="8" parentID="9">
   <atom label="NormalWord$0"/>
   <atom label="NormalWord$1"/>
   <atom label="NormalWord$2"/>
   <atom label="NormalWord$3"/>
   <atom label="NormalWord$4"/>
   <atom label="NormalWord$5"/>
</sig>

<field label="inBlock" ID="10" parentID="8">
   <tuple> <atom label="NormalWord$0"/> <atom label="Block$0"/> </tuple>
   <tuple> <atom label="NormalWord$1"/> <atom label="Block$0"/> </tuple>
   <tuple> <atom label="NormalWord$2"/> <atom label="Block$0"/> </tuple>
   <tuple> <atom label="NormalWord$3"/> <atom label="Block$0"/> </tuple>
   <tuple> <atom label="NormalWord$4"/> <atom label="Block$0"/> </tuple>
   <tuple> <atom label="NormalWord$5"/> <atom label="Block$0"/> </tuple>
   <types> <type ID="8"/> <type ID="11"/> </types>
</field>

<sig label="this/HeapHeader" ID="12" parentID="9" one="yes">
   <atom label="HeapHeader$0"/>
</sig>

<field label="first" ID="13" parentID="12">
   <tuple> <atom label="HeapHeader$0"/> <atom label="Block$0"/> </tuple>
   <types> <type ID="12"/> <type ID="11"/> </types>
</field>

<sig label="this/HeapFooter" ID="14" parentID="9" one="yes">
   <atom label="HeapFooter$0"/>
</sig>

<sig label="this/Word" ID="9" parentID="2" abstract="yes">
</sig>

<field label="pre" ID="15" parentID="9">
   <tuple> <atom label="HeapFooter$0"/> <atom label="NormalWord$1"/> </tuple>
   <tuple> <atom label="NormalWord$0"/> <atom label="NormalWord$3"/> </tuple>
   <tuple> <atom label="NormalWord$1"/> <atom label="NormalWord$0"/> </tuple>
   <tuple> <atom label="NormalWord$2"/> <atom label="HeapHeader$0"/> </tuple>
   <tuple> <atom label="NormalWord$3"/> <atom label="NormalWord$5"/> </tuple>
   <tuple> <atom label="NormalWord$4"/> <atom label="NormalWord$2"/> </tuple>
   <tuple> <atom label="NormalWord$5"/> <atom label="NormalWord$4"/> </tuple>
   <types> <type ID="9"/> <type ID="9"/> </types>
</field>

<field label="nex" ID="16" parentID="9">
   <tuple> <atom label="HeapHeader$0"/> <atom label="NormalWord$2"/> </tuple>
   <tuple> <atom label="NormalWord$0"/> <atom label="NormalWord$1"/> </tuple>
   <tuple> <atom label="NormalWord$1"/> <atom label="HeapFooter$0"/> </tuple>
   <tuple> <atom label="NormalWord$2"/> <atom label="NormalWord$4"/> </tuple>
   <tuple> <atom label="NormalWord$3"/> <atom label="NormalWord$0"/> </tuple>
   <tuple> <atom label="NormalWord$4"/> <atom label="NormalWord$5"/> </tuple>
   <tuple> <atom label="NormalWord$5"/> <atom label="NormalWord$3"/> </tuple>
   <types> <type ID="9"/> <type ID="9"/> </types>
</field>

<sig label="this/Block" ID="11" parentID="2">
   <atom label="Block$0"/>
</sig>

<field label="status" ID="17" parentID="11">
   <tuple> <atom label="Block$0"/> <atom label="Free$0"/> </tuple>
   <types> <type ID="11"/> <type ID="5"/> </types>
</field>

<field label="prede" ID="18" parentID="11">
   <types> <type ID="11"/> <type ID="11"/> </types>
</field>

<field label="succ" ID="19" parentID="11">
   <types> <type ID="11"/> <type ID="11"/> </types>
</field>

<field label="words" ID="20" parentID="11">
   <tuple> <atom label="Block$0"/> <atom label="NormalWord$0"/> </tuple>
   <tuple> <atom label="Block$0"/> <atom label="NormalWord$1"/> </tuple>
   <tuple> <atom label="Block$0"/> <atom label="NormalWord$2"/> </tuple>
   <tuple> <atom label="Block$0"/> <atom label="NormalWord$3"/> </tuple>
   <tuple> <atom label="Block$0"/> <atom label="NormalWord$4"/> </tuple>
   <tuple> <atom label="Block$0"/> <atom label="NormalWord$5"/> </tuple>
   <types> <type ID="11"/> <type ID="8"/> </types>
</field>

<sig label="univ" ID="2" builtin="yes" var="yes">
</sig>

</instance>

<source filename="C:\Users\tilly\cs340\cs340project\malloc.als" content="/*&#x000a;&#x000a;All blocks are &quot;alloc&quot; or &quot;free&quot;. &#x000a;Blocks have at most one &quot;predecessor&quot;&#x000a;                             &#x000a;       HEAP        &#x000a;   +-----------+ &#x000a;b0 |alloc 0b11 +&#x000a;   +-----------+ &#x000a;b1 |    ???    |  &#x000a;   +-----------+ &#x000a;b2 |free  0b?0 +&#x000a;   +-----------+ &#x000a;&#x000a;The question: given that we don&apos;t know the allocation status of  ???, &#x000a;is it possible for us to know if the following is true?&#x000a;    &quot;There is some free block whose predecessor is allocated&quot;&#x000a;*/&#x000a;&#x000a;&#x000a;// Descriptions of objects: &quot;sig&quot;&#x000a;// abstract: don&apos;t have any just Status, have the sub-sigs&#x000a;abstract sig Status {} &#x000a;&#x000a;// extend works like in an object-oriented language. &#x000a;// Alloc is a subset of Status. Free is a subset of Status.&#x000a;// &quot;one&quot; here means there will only be one atom of each.&#x000a;one sig Alloc extends Status {}&#x000a;one sig Free extends Status {}&#x000a;&#x000a;// Sig for words&#x000a;&#x000a;abstract sig Word {&#x000a;  pre: lone Word,&#x000a;  nex: lone Word,&#x000a;}&#x000a;&#x000a;sig NormalWord extends Word {&#x000a;  inBlock: lone Block,  &#x000a;}&#x000a;&#x000a;one sig HeapHeader extends Word {&#x000a;  first: lone Block&#x000a;}&#x000a;&#x000a;one sig HeapFooter extends Word {}&#x000a;&#x000a;sig HeaderWord extends NormalWord {}&#x000a;&#x000a;/*&#x000a;sig HeaderWord extends Word{&#x000a;  inBlock: lone Block,&#x000a;  size: Int&#x000a;}&#x000a;&#x000a;sig FooterWord extends Word{&#x000a;  inBlock: lone Block,&#x000a;  size: Int&#x000a;}*/&#x000a;&#x000a;// prede: relation Block -&gt; Block &#x000a;// succ: relation Block -&gt; Block&#x000a;&#x000a;// prede and succ are each a subset of Block x Block&#x000a;&#x000a;sig Block {&#x000a;  status: Status, &#x000a;  prede: lone Block, &#x000a;  succ: lone Block,&#x000a;  words: set NormalWord&#x000a;}&#x000a;&#x000a;fact WordSuccession {&#x000a;  // A more verbose way to write the following statement:&#x000a;  //all a, b : Block | a-&gt;b in prede &lt;=&gt; b-&gt;a in succ&#x000a;&#x000a;  // Relational operator: ~ is transpose (switch order)&#x000a;  ~prede = succ&#x000a;  ~pre = nex&#x000a;  all disj x,y : NormalWord | y in x.^nex or y in x.^pre  // connected &#x000a;  no HeapHeader.pre&#x000a;  all x: NormalWord | x in HeapHeader.^nex&#x000a;  no HeapFooter.nex&#x000a;  all x: NormalWord | x in HeapFooter.^pre&#x000a;}&#x000a;&#x000a;// Each word corresponds to only one block&#x000a;&#x000a;pred OneBlockPerWord {&#x000a;  all w:NormalWord, b:Block | w-&gt;b in inBlock &lt;=&gt; b-&gt;w in words&#x000a; // ~words = inBlock&#x000a;}&#x000a;&#x000a;pred mm_init {&#x000a;  one Block&#x000a;  no HeaderWord&#x000a;  Block.status = Free&#x000a;  Block.words = NormalWord&#x000a;  OneBlockPerWord&#x000a;  HeapHeader.first = Block&#x000a;  no prede&#x000a;  no succ&#x000a;  //#NormalWord &gt; 4&#x000a;}&#x000a;&#x000a;pred can_malloc[b:Block, size:Int] {&#x000a;  b.status = Free&#x000a;  int #b.words &gt;= int size + int 1&#x000a;  no b1:Block | #b1.words &gt;= size + 1 and b1 in b.^prede&#x000a;}&#x000a;&#x000a;pred allocate [b:Block, x:Int] {&#x000a; one disj z, y:Block | z not in Block and y not in Block =&gt; {&#x000a;      Block&apos; = Block + z + y&#x000a;      z.words&apos; + y.words&apos; = b.words&#x000a;      #z.words&apos; = x + 1&#x000a;      z.status&apos; = Alloc&#x000a;      y.status&apos; = Free&#x000a;    }  &#x000a;}&#x000a;&#x000a;pred mm_malloc [x:Int] {&#x000a;  one b:Block | can_malloc[b, x] =&gt; {&#x000a;   b.status&apos; = Alloc&#x000a;  }&#x000a;}&#x000a;&#x000a;run {mm_init&#x000a;        } for 8 but exactly 8 Word&#x000a;run {&#x000a;some b: Block | #b.words &gt; 1&#x000a;} for 3 but exactly 3 Block&#x000a;// Only consecutive words can point to same block&#x000a;&#x000a;&#x000a;// mm_init()&#x000a;&#x000a; &#x000a;"/>

<source filename="\$alloy4$\models\util\integer.als" content="module util/integer&#x000a;&#x000a;/*&#x000a; * A collection of utility functions for using Integers in Alloy.&#x000a; * Note that integer overflows are silently truncated to the current bitwidth&#x000a; * using the 2&apos;s complement arithmetic, unless the &quot;forbid overfows&quot; option is&#x000a; * turned on, in which case only models that don&apos;t have any overflows are &#x000a; * analyzed. &#x000a; */&#x000a;&#x000a;fun add  [n1, n2: Int] : Int { this/plus[n1, n2] }&#x000a;fun plus [n1, n2: Int] : Int { n1 fun/add n2 }&#x000a;&#x000a;fun sub   [n1, n2: Int] : Int { this/minus[n1, n2] }&#x000a;fun minus [n1, n2: Int] : Int { n1 fun/sub n2 }&#x000a;&#x000a;fun mul [n1, n2: Int] : Int { n1 fun/mul n2 }&#x000a;&#x000a;/**&#x000a; * Performs the division with &quot;round to zero&quot; semantics, except the following 3 cases&#x000a; * 1) if a is 0, then it returns 0&#x000a; * 2) else if b is 0, then it returns 1 if a is negative and -1 if a is positive&#x000a; * 3) else if a is the smallest negative integer, and b is -1, then it returns a&#x000a; */&#x000a;fun div [n1, n2: Int] : Int { n1 fun/div n2 }&#x000a;&#x000a;/** answer is defined to be the unique integer that satisfies &quot;a = ((a/b)*b) + remainder&quot; */&#x000a;fun rem [n1, n2: Int] : Int { n1 fun/rem n2 }&#x000a;&#x000a;/** negate */&#x000a;fun negate [n: Int] : Int { 0 fun/sub n }&#x000a;&#x000a;/** equal to */&#x000a;pred eq [n1, n2: Int] { int[n1] = int[n2] }&#x000a;&#x000a;/** greater than */&#x000a;pred gt [n1, n2: Int] { n1 &gt; n2 }&#x000a;&#x000a;/** less then */&#x000a;pred lt [n1, n2: Int] { n1 &lt; n2 }&#x000a;&#x000a;/** greater than or equal */&#x000a;pred gte [n1, n2: Int] { n1 &gt;= n2 }&#x000a;&#x000a;/** less than or equal */&#x000a;pred lte [n1, n2: Int] { n1 &lt;= n2 }&#x000a;&#x000a;/** integer is zero */&#x000a;pred zero [n: Int] { n = 0 }&#x000a;&#x000a;/** positive */&#x000a;pred pos  [n: Int] { n &gt; 0 }&#x000a;&#x000a;/** negative */&#x000a;pred neg  [n: Int] { n &lt; 0 }&#x000a;&#x000a;/** non-positive */&#x000a;pred nonpos [n: Int] { n &lt;= 0 }&#x000a;&#x000a;/** non-negative */&#x000a;pred nonneg [n: Int] { n &gt;= 0 }&#x000a;&#x000a;/** signum (aka sign or sgn) */&#x000a;fun signum [n: Int] : Int { n&lt;0 =&gt; (0 fun/sub 1) else (n&gt;0 =&gt; 1 else 0) }&#x000a;&#x000a;/**&#x000a; * returns the ith element (zero-based) from the set s&#x000a; * in the ordering of &apos;next&apos;, which is a linear ordering&#x000a; * relation like that provided by util/ordering&#x000a; */&#x000a;fun int2elem[i: Int, next: univ-&gt;univ, s: set univ] : lone s {&#x000a;  {e: s | #^next.e = int i }&#x000a;}&#x000a;&#x000a;/**&#x000a; * returns the index of the element (zero-based) in the&#x000a; * ordering of next, which is a linear ordering relation&#x000a; * like that provided by util/ordering&#x000a; */&#x000a;fun elem2int[e: univ, next: univ-&gt;univ] : lone Int {&#x000a;  Int[#^next.e]&#x000a;}&#x000a;&#x000a;/** returns the largest integer in the current bitwidth */&#x000a;fun max:one Int { fun/max }&#x000a;&#x000a;/** returns the smallest integer in the current bitwidth */&#x000a;fun min:one Int { fun/min }&#x000a;&#x000a;/** maps each integer (except max) to the integer after it */&#x000a;fun next:Int-&gt;Int { fun/next }&#x000a;&#x000a;/** maps each integer (except min) to the integer before it */&#x000a;fun prev:Int-&gt;Int { ~next }&#x000a;&#x000a;/** given a set of integers, return the largest element */&#x000a;fun max [es: set Int]: lone Int { es - es.^prev }&#x000a;&#x000a;/** given a set of integers, return the smallest element */&#x000a;fun min [es: set Int]: lone Int { es - es.^next }&#x000a;&#x000a;/** given an integer, return all integers prior to it */&#x000a;fun prevs [e: Int]: set Int { e.^prev }&#x000a;&#x000a;/** given an integer, return all integers following it */&#x000a;fun nexts [e: Int]: set Int { e.^next }&#x000a;&#x000a;/** returns the larger of the two integers */&#x000a;fun larger [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; b else a) }&#x000a;&#x000a;/** returns the smaller of the two integers */&#x000a;fun smaller [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; a else b) }&#x000a;"/>

</alloy>
